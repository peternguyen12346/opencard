window.addEventListener("DOMContentLoaded", async function() {
    if (typeof Pi === 'undefined') {
        alert('Pi SDK ch∆∞a ƒë∆∞·ª£c t·∫£i!');
        return;
    }

    await Pi.init({ version: "2.0" }); // ‚úÖ ƒë√∫ng chu·∫©n
    console.log("Pi SDK initialized!");

    const authBtn = document.getElementById("authBtn");
    const payBtn = document.getElementById("payBtn");
    const resultEl = document.getElementById("result");
    let currentUser = null;

    // ƒêƒÉng nh·∫≠p
    authBtn.addEventListener("click", async () => {
        try {
            const auth = await Pi.authenticate(["payments"], onIncompletePaymentFound);
            currentUser = auth.user;
            resultEl.textContent = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng:\n" + JSON.stringify(currentUser, null, 2);
            payBtn.disabled = false;
        } catch (err) {
            resultEl.textContent = "L·ªói ƒëƒÉng nh·∫≠p: " + err.message;
        }
    });

    // Thanh to√°n 1 Pi
    payBtn.addEventListener("click", async () => {
        if (!currentUser) {
            alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc!");
            return;
        }

        const paymentData = {
            amount: 1,
            memo: "Thanh to√°n th·ª≠ nghi·ªám 1 Pi",
            metadata: { InternalPaymentID: 1234 },
        };

        const paymentCallbacks = {
            onReadyForServerApproval: function(paymentId) {
                console.log("üü¢ Ready for server approval:", paymentId);
            },
            onReadyForServerCompletion: function(paymentId, txid) {
                console.log("‚úÖ Payment completed:", paymentId, txid);
                resultEl.textContent = `Thanh to√°n th√†nh c√¥ng! PaymentID: ${paymentId}, TxID: ${txid}`;
            },
            onCancel: function(paymentId) {
                console.log("‚ö† Ng∆∞·ªùi d√πng h·ªßy thanh to√°n:", paymentId);
                resultEl.textContent = "Ng∆∞·ªùi d√πng h·ªßy thanh to√°n";
            },
            onError: function(error, payment) {
                console.error("‚ùå L·ªói thanh to√°n:", error, payment);
                resultEl.textContent = "L·ªói thanh to√°n: " + error.message;
            }
        };

        try {
            await Pi.createPayment(paymentData, paymentCallbacks);
        } catch (err) {
            console.error(err);
            resultEl.textContent = "L·ªói g·ªçi Pi.createPayment: " + err.message;
        }
    });

    function onIncompletePaymentFound(payment) {
        console.log("üîÅ Giao d·ªãch ch∆∞a ho√†n t·∫•t:", payment);
    }
});
