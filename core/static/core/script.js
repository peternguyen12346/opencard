window.addEventListener("DOMContentLoaded", async () => {
  console.log("‚úÖ DOM loaded!");

  if (typeof Pi === "undefined") {
    alert("‚ùå Pi SDK ch∆∞a ƒë∆∞·ª£c t·∫£i!");
    console.error("Pi SDK is undefined!");
    return;
  }

  await Pi.init({ version: "2.0" });
  console.log("‚úÖ Pi SDK initialized!", Pi);

  const resultEl = document.getElementById("result");
  const authBtn = document.getElementById("authBtn");
  const payBtn = document.getElementById("payBtn");

  let currentUser = null;

  // N√∫t ƒëƒÉng nh·∫≠p
  authBtn.addEventListener("click", async () => {
    try {
      const scopes = ["payments"];
      const auth = await Pi.authenticate(scopes, onIncompletePaymentFound);
      currentUser = auth.user;
      resultEl.textContent =
        "ƒêƒÉng nh·∫≠p th√†nh c√¥ng:\n" + JSON.stringify(currentUser, null, 2);
      payBtn.disabled = false;
    } catch (error) {
      resultEl.textContent = "L·ªói ƒëƒÉng nh·∫≠p: " + error.message;
    }
  });

  // N√∫t thanh to√°n
  payBtn.addEventListener("click", async () => {
    if (!currentUser) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc!");
      return;
    }

    const paymentData = {
      amount: 1,
      memo: "Thanh to√°n 1 Pi demo",
      metadata: { purpose: "demo" },
    };

    const paymentCallbacks = {
      // Khi Pi SDK y√™u c·∫ßu backend approve
      onReadyForServerApproval: function (paymentId) {
        console.log("üîπ Approval requested:", paymentId);
        // ƒê·ªÉ demo, approve ngay l·∫≠p t·ª©c
        Pi.approvePayment(paymentId)
          .then(() => {
            console.log("‚úÖ Payment approved on server side");
          })
          .catch((err) => {
            console.error("‚ùå Approval failed:", err);
          });
      },
      // Khi giao d·ªãch ho√†n t·∫•t
      onReadyForServerCompletion: function (paymentId, txid) {
        console.log("‚úÖ Payment ready for completion:", paymentId, txid);
        resultEl.textContent =
          "Thanh to√°n th√†nh c√¥ng!\nPaymentId: " +
          paymentId +
          "\nTxId: " +
          txid;
      },
      onCancel: function (paymentId) {
        console.log("‚ö† Ng∆∞·ªùi d√πng h·ªßy thanh to√°n:", paymentId);
        resultEl.textContent = "Ng∆∞·ªùi d√πng h·ªßy thanh to√°n";
      },
      onError: function (error, payment) {
        console.error("‚ùå L·ªói thanh to√°n:", error, payment);
        resultEl.textContent = "L·ªói thanh to√°n: " + error.message;
      },
    };

    try {
      await Pi.createPayment(paymentData, paymentCallbacks);
    } catch (err) {
      console.error("‚ùå Pi.createPayment failed:", err);
      resultEl.textContent = "L·ªói thanh to√°n: " + err.message;
    }
  });

  function onIncompletePaymentFound(payment) {
    console.log("üîÅ Giao d·ªãch ch∆∞a ho√†n t·∫•t:", payment);
  }
});
